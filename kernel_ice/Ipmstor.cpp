// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.0
//
// <auto-generated>
//
// Generated from file `Ipmstor.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include "Ipmstor.h"
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/BasicStream.h>
#include <Ice/Object.h>
#include <IceUtil/Iterator.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 0
#       error Ice patch level mismatch!
#   endif
#endif

namespace
{

namespace
{

const ::std::string __IPMS__jk__Ipmstor__ipmssea_name = "ipmssea";

const ::std::string __IPMS__jk__Ipmstor__updatednipdata_name = "updatednipdata";

const ::std::string __IPMS__jk__Ipmstor__updatewhois_name = "updatewhois";

const ::std::string __IPMS__jk__Ipmstor__feedbackview_name = "feedbackview";

const ::std::string __IPMS__jk__Ipmstor__feedbackqitalianxu_name = "feedbackqitalianxu";

const ::std::string __IPMS__jk__Ipmstor__feedbackareaview_name = "feedbackareaview";

const ::std::string __IPMS__jk__Ipmstor__feedbacksp_name = "feedbacksp";

const ::std::string __IPMS__jk__Ipmstor__feedbacks_name = "feedbacks";

const ::std::string __IPMS__jk__Ipmstor__feedbackss_name = "feedbackss";

const ::std::string __IPMS__jk__Ipmstor__feedbackoldss_name = "feedbackoldss";

const ::std::string __IPMS__jk__Ipmstor__feedbackhaiwai_name = "feedbackhaiwai";

const ::std::string __IPMS__jk__Ipmstor__feedbackisp_name = "feedbackisp";

const ::std::string __IPMS__jk__Ipmstor__feedbackssisp_name = "feedbackssisp";

const ::std::string __IPMS__jk__Ipmstor__feedbackpushengpy_name = "feedbackpushengpy";

const ::std::string __IPMS__jk__Ipmstor__updateprovpy_name = "updateprovpy";

const ::std::string __IPMS__jk__Ipmstor__feedbackarea_name = "feedbackarea";

const ::std::string __IPMS__jk__Ipmstor__feedbackviewarea_name = "feedbackviewarea";

const ::std::string __IPMS__jk__Ipmstor__feedbackipinfo_name = "feedbackipinfo";

const ::std::string __IPMS__jk__Ipmstor__feedbackviewsheng_name = "feedbackviewsheng";

const ::std::string __IPMS__jk__Ipmstor__feedbackviewlargearea_name = "feedbackviewlargearea";

const ::std::string __IPMS__jk__Ipmstor__updatecitypy_name = "updatecitypy";

const ::std::string __IPMS__jk__Ipmstor__updatehaiwaipy_name = "updatehaiwaipy";

}

}

namespace
{

const char* __IPMS__yc__IPUploadError_name = "IPMS::yc::IPUploadError";

struct __F__IPMS__yc__IPUploadError : public ::IceInternal::UserExceptionFactory
{
    virtual void
    createAndThrow(const ::std::string&)
    {
        throw ::IPMS::yc::IPUploadError();
    }
};

class __F__IPMS__yc__IPUploadError__Init
{
public:

    __F__IPMS__yc__IPUploadError__Init()
    {
        ::IceInternal::factoryTable->addExceptionFactory("::IPMS::yc::IPUploadError", new __F__IPMS__yc__IPUploadError);
    }

    ~__F__IPMS__yc__IPUploadError__Init()
    {
        ::IceInternal::factoryTable->removeExceptionFactory("::IPMS::yc::IPUploadError");
    }
};

const __F__IPMS__yc__IPUploadError__Init __F__IPMS__yc__IPUploadError__i;

}

IPMS::yc::IPUploadError::~IPUploadError() throw()
{
}

::std::string
IPMS::yc::IPUploadError::ice_name() const
{
    return __IPMS__yc__IPUploadError_name;
}

IPMS::yc::IPUploadError*
IPMS::yc::IPUploadError::ice_clone() const
{
    return new IPUploadError(*this);
}

void
IPMS::yc::IPUploadError::ice_throw() const
{
    throw *this;
}

void
IPMS::yc::IPUploadError::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::IPMS::yc::IPUploadError", -1, true);
    __os->endWriteSlice();
}

void
IPMS::yc::IPUploadError::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

namespace
{

const char* __IPMS__yc__IPDataTooLargerError_name = "IPMS::yc::IPDataTooLargerError";

struct __F__IPMS__yc__IPDataTooLargerError : public ::IceInternal::UserExceptionFactory
{
    virtual void
    createAndThrow(const ::std::string&)
    {
        throw ::IPMS::yc::IPDataTooLargerError();
    }
};

class __F__IPMS__yc__IPDataTooLargerError__Init
{
public:

    __F__IPMS__yc__IPDataTooLargerError__Init()
    {
        ::IceInternal::factoryTable->addExceptionFactory("::IPMS::yc::IPDataTooLargerError", new __F__IPMS__yc__IPDataTooLargerError);
    }

    ~__F__IPMS__yc__IPDataTooLargerError__Init()
    {
        ::IceInternal::factoryTable->removeExceptionFactory("::IPMS::yc::IPDataTooLargerError");
    }
};

const __F__IPMS__yc__IPDataTooLargerError__Init __F__IPMS__yc__IPDataTooLargerError__i;

}

IPMS::yc::IPDataTooLargerError::~IPDataTooLargerError() throw()
{
}

::std::string
IPMS::yc::IPDataTooLargerError::ice_name() const
{
    return __IPMS__yc__IPDataTooLargerError_name;
}

IPMS::yc::IPDataTooLargerError*
IPMS::yc::IPDataTooLargerError::ice_clone() const
{
    return new IPDataTooLargerError(*this);
}

void
IPMS::yc::IPDataTooLargerError::ice_throw() const
{
    throw *this;
}

void
IPMS::yc::IPDataTooLargerError::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::IPMS::yc::IPDataTooLargerError", -1, true);
    __os->endWriteSlice();
}

void
IPMS::yc::IPDataTooLargerError::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

namespace
{

const char* __IPMS__yc__IPDownloadError_name = "IPMS::yc::IPDownloadError";

struct __F__IPMS__yc__IPDownloadError : public ::IceInternal::UserExceptionFactory
{
    virtual void
    createAndThrow(const ::std::string&)
    {
        throw ::IPMS::yc::IPDownloadError();
    }
};

class __F__IPMS__yc__IPDownloadError__Init
{
public:

    __F__IPMS__yc__IPDownloadError__Init()
    {
        ::IceInternal::factoryTable->addExceptionFactory("::IPMS::yc::IPDownloadError", new __F__IPMS__yc__IPDownloadError);
    }

    ~__F__IPMS__yc__IPDownloadError__Init()
    {
        ::IceInternal::factoryTable->removeExceptionFactory("::IPMS::yc::IPDownloadError");
    }
};

const __F__IPMS__yc__IPDownloadError__Init __F__IPMS__yc__IPDownloadError__i;

}

IPMS::yc::IPDownloadError::~IPDownloadError() throw()
{
}

::std::string
IPMS::yc::IPDownloadError::ice_name() const
{
    return __IPMS__yc__IPDownloadError_name;
}

IPMS::yc::IPDownloadError*
IPMS::yc::IPDownloadError::ice_clone() const
{
    return new IPDownloadError(*this);
}

void
IPMS::yc::IPDownloadError::ice_throw() const
{
    throw *this;
}

void
IPMS::yc::IPDownloadError::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::IPMS::yc::IPDownloadError", -1, true);
    __os->endWriteSlice();
}

void
IPMS::yc::IPDownloadError::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

namespace Ice
{
}
::IceProxy::Ice::Object* ::IceProxy::IPMS::jk::upCast(::IceProxy::IPMS::jk::Ipmstor* p) { return p; }

void
::IceProxy::IPMS::jk::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::IPMS::jk::Ipmstor>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::IPMS::jk::Ipmstor;
        v->__copyFrom(proxy);
    }
}

::std::string
IceProxy::IPMS::jk::Ipmstor::ipmssea(const ::std::string& start, const ::std::string& end, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __IPMS__jk__Ipmstor__ipmssea_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__IPMS__jk__Ipmstor__ipmssea_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::IPMS::jk::Ipmstor* __del = dynamic_cast< ::IceDelegate::IPMS::jk::Ipmstor*>(__delBase.get());
            return __del->ipmssea(start, end, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::IPMS::jk::Ipmstor::begin_ipmssea(const ::std::string& start, const ::std::string& end, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__IPMS__jk__Ipmstor__ipmssea_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __IPMS__jk__Ipmstor__ipmssea_name, __del, __cookie);
    try
    {
        __result->__prepare(__IPMS__jk__Ipmstor__ipmssea_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(start);
        __os->write(end);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::std::string
IceProxy::IPMS::jk::Ipmstor::end_ipmssea(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __IPMS__jk__Ipmstor__ipmssea_name);
    ::std::string __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

bool
IceProxy::IPMS::jk::Ipmstor::updatednipdata(const ::IPMS::dx::IPinfo& ipinfo, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __IPMS__jk__Ipmstor__updatednipdata_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__IPMS__jk__Ipmstor__updatednipdata_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::IPMS::jk::Ipmstor* __del = dynamic_cast< ::IceDelegate::IPMS::jk::Ipmstor*>(__delBase.get());
            return __del->updatednipdata(ipinfo, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::IPMS::jk::Ipmstor::begin_updatednipdata(const ::IPMS::dx::IPinfo& ipinfo, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__IPMS__jk__Ipmstor__updatednipdata_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __IPMS__jk__Ipmstor__updatednipdata_name, __del, __cookie);
    try
    {
        __result->__prepare(__IPMS__jk__Ipmstor__updatednipdata_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(ipinfo);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

bool
IceProxy::IPMS::jk::Ipmstor::end_updatednipdata(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __IPMS__jk__Ipmstor__updatednipdata_name);
    bool __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::std::string
IceProxy::IPMS::jk::Ipmstor::updatewhois(const ::std::string& ip, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __IPMS__jk__Ipmstor__updatewhois_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__IPMS__jk__Ipmstor__updatewhois_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::IPMS::jk::Ipmstor* __del = dynamic_cast< ::IceDelegate::IPMS::jk::Ipmstor*>(__delBase.get());
            return __del->updatewhois(ip, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::IPMS::jk::Ipmstor::begin_updatewhois(const ::std::string& ip, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__IPMS__jk__Ipmstor__updatewhois_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __IPMS__jk__Ipmstor__updatewhois_name, __del, __cookie);
    try
    {
        __result->__prepare(__IPMS__jk__Ipmstor__updatewhois_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(ip);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::std::string
IceProxy::IPMS::jk::Ipmstor::end_updatewhois(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __IPMS__jk__Ipmstor__updatewhois_name);
    ::std::string __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::std::string
IceProxy::IPMS::jk::Ipmstor::feedbackview(const ::std::string& prov, const ::std::string& city, const ::std::string& isp, const ::std::string& opflag, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __IPMS__jk__Ipmstor__feedbackview_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__IPMS__jk__Ipmstor__feedbackview_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::IPMS::jk::Ipmstor* __del = dynamic_cast< ::IceDelegate::IPMS::jk::Ipmstor*>(__delBase.get());
            return __del->feedbackview(prov, city, isp, opflag, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::IPMS::jk::Ipmstor::begin_feedbackview(const ::std::string& prov, const ::std::string& city, const ::std::string& isp, const ::std::string& opflag, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__IPMS__jk__Ipmstor__feedbackview_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __IPMS__jk__Ipmstor__feedbackview_name, __del, __cookie);
    try
    {
        __result->__prepare(__IPMS__jk__Ipmstor__feedbackview_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(prov);
        __os->write(city);
        __os->write(isp);
        __os->write(opflag);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::std::string
IceProxy::IPMS::jk::Ipmstor::end_feedbackview(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __IPMS__jk__Ipmstor__feedbackview_name);
    ::std::string __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::std::string
IceProxy::IPMS::jk::Ipmstor::feedbackqitalianxu(const ::std::string& prov, const ::std::string& city, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __IPMS__jk__Ipmstor__feedbackqitalianxu_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__IPMS__jk__Ipmstor__feedbackqitalianxu_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::IPMS::jk::Ipmstor* __del = dynamic_cast< ::IceDelegate::IPMS::jk::Ipmstor*>(__delBase.get());
            return __del->feedbackqitalianxu(prov, city, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::IPMS::jk::Ipmstor::begin_feedbackqitalianxu(const ::std::string& prov, const ::std::string& city, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__IPMS__jk__Ipmstor__feedbackqitalianxu_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __IPMS__jk__Ipmstor__feedbackqitalianxu_name, __del, __cookie);
    try
    {
        __result->__prepare(__IPMS__jk__Ipmstor__feedbackqitalianxu_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(prov);
        __os->write(city);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::std::string
IceProxy::IPMS::jk::Ipmstor::end_feedbackqitalianxu(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __IPMS__jk__Ipmstor__feedbackqitalianxu_name);
    ::std::string __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::std::string
IceProxy::IPMS::jk::Ipmstor::feedbackareaview(const ::std::string& areapy, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __IPMS__jk__Ipmstor__feedbackareaview_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__IPMS__jk__Ipmstor__feedbackareaview_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::IPMS::jk::Ipmstor* __del = dynamic_cast< ::IceDelegate::IPMS::jk::Ipmstor*>(__delBase.get());
            return __del->feedbackareaview(areapy, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::IPMS::jk::Ipmstor::begin_feedbackareaview(const ::std::string& areapy, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__IPMS__jk__Ipmstor__feedbackareaview_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __IPMS__jk__Ipmstor__feedbackareaview_name, __del, __cookie);
    try
    {
        __result->__prepare(__IPMS__jk__Ipmstor__feedbackareaview_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(areapy);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::std::string
IceProxy::IPMS::jk::Ipmstor::end_feedbackareaview(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __IPMS__jk__Ipmstor__feedbackareaview_name);
    ::std::string __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::IPMS::jk::PRinfoList
IceProxy::IPMS::jk::Ipmstor::feedbacksp(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __IPMS__jk__Ipmstor__feedbacksp_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__IPMS__jk__Ipmstor__feedbacksp_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::IPMS::jk::Ipmstor* __del = dynamic_cast< ::IceDelegate::IPMS::jk::Ipmstor*>(__delBase.get());
            return __del->feedbacksp(__ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::IPMS::jk::Ipmstor::begin_feedbacksp(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__IPMS__jk__Ipmstor__feedbacksp_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __IPMS__jk__Ipmstor__feedbacksp_name, __del, __cookie);
    try
    {
        __result->__prepare(__IPMS__jk__Ipmstor__feedbacksp_name, ::Ice::Normal, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::IPMS::jk::PRinfoList
IceProxy::IPMS::jk::Ipmstor::end_feedbacksp(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __IPMS__jk__Ipmstor__feedbacksp_name);
    ::IPMS::jk::PRinfoList __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::IPMS::jk::SSinfoList
IceProxy::IPMS::jk::Ipmstor::feedbacks(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __IPMS__jk__Ipmstor__feedbacks_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__IPMS__jk__Ipmstor__feedbacks_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::IPMS::jk::Ipmstor* __del = dynamic_cast< ::IceDelegate::IPMS::jk::Ipmstor*>(__delBase.get());
            return __del->feedbacks(__ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::IPMS::jk::Ipmstor::begin_feedbacks(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__IPMS__jk__Ipmstor__feedbacks_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __IPMS__jk__Ipmstor__feedbacks_name, __del, __cookie);
    try
    {
        __result->__prepare(__IPMS__jk__Ipmstor__feedbacks_name, ::Ice::Normal, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::IPMS::jk::SSinfoList
IceProxy::IPMS::jk::Ipmstor::end_feedbacks(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __IPMS__jk__Ipmstor__feedbacks_name);
    ::IPMS::jk::SSinfoList __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::IPMS::jk::SSinfoList
IceProxy::IPMS::jk::Ipmstor::feedbackss(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __IPMS__jk__Ipmstor__feedbackss_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__IPMS__jk__Ipmstor__feedbackss_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::IPMS::jk::Ipmstor* __del = dynamic_cast< ::IceDelegate::IPMS::jk::Ipmstor*>(__delBase.get());
            return __del->feedbackss(__ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::IPMS::jk::Ipmstor::begin_feedbackss(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__IPMS__jk__Ipmstor__feedbackss_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __IPMS__jk__Ipmstor__feedbackss_name, __del, __cookie);
    try
    {
        __result->__prepare(__IPMS__jk__Ipmstor__feedbackss_name, ::Ice::Normal, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::IPMS::jk::SSinfoList
IceProxy::IPMS::jk::Ipmstor::end_feedbackss(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __IPMS__jk__Ipmstor__feedbackss_name);
    ::IPMS::jk::SSinfoList __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::IPMS::jk::SSIspList
IceProxy::IPMS::jk::Ipmstor::feedbackoldss(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __IPMS__jk__Ipmstor__feedbackoldss_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__IPMS__jk__Ipmstor__feedbackoldss_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::IPMS::jk::Ipmstor* __del = dynamic_cast< ::IceDelegate::IPMS::jk::Ipmstor*>(__delBase.get());
            return __del->feedbackoldss(__ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::IPMS::jk::Ipmstor::begin_feedbackoldss(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__IPMS__jk__Ipmstor__feedbackoldss_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __IPMS__jk__Ipmstor__feedbackoldss_name, __del, __cookie);
    try
    {
        __result->__prepare(__IPMS__jk__Ipmstor__feedbackoldss_name, ::Ice::Normal, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::IPMS::jk::SSIspList
IceProxy::IPMS::jk::Ipmstor::end_feedbackoldss(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __IPMS__jk__Ipmstor__feedbackoldss_name);
    ::IPMS::jk::SSIspList __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::IPMS::jk::SSinfoList
IceProxy::IPMS::jk::Ipmstor::feedbackhaiwai(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __IPMS__jk__Ipmstor__feedbackhaiwai_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__IPMS__jk__Ipmstor__feedbackhaiwai_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::IPMS::jk::Ipmstor* __del = dynamic_cast< ::IceDelegate::IPMS::jk::Ipmstor*>(__delBase.get());
            return __del->feedbackhaiwai(__ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::IPMS::jk::Ipmstor::begin_feedbackhaiwai(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__IPMS__jk__Ipmstor__feedbackhaiwai_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __IPMS__jk__Ipmstor__feedbackhaiwai_name, __del, __cookie);
    try
    {
        __result->__prepare(__IPMS__jk__Ipmstor__feedbackhaiwai_name, ::Ice::Normal, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::IPMS::jk::SSinfoList
IceProxy::IPMS::jk::Ipmstor::end_feedbackhaiwai(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __IPMS__jk__Ipmstor__feedbackhaiwai_name);
    ::IPMS::jk::SSinfoList __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::IPMS::jk::ISPinfoList
IceProxy::IPMS::jk::Ipmstor::feedbackisp(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __IPMS__jk__Ipmstor__feedbackisp_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__IPMS__jk__Ipmstor__feedbackisp_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::IPMS::jk::Ipmstor* __del = dynamic_cast< ::IceDelegate::IPMS::jk::Ipmstor*>(__delBase.get());
            return __del->feedbackisp(__ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::IPMS::jk::Ipmstor::begin_feedbackisp(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__IPMS__jk__Ipmstor__feedbackisp_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __IPMS__jk__Ipmstor__feedbackisp_name, __del, __cookie);
    try
    {
        __result->__prepare(__IPMS__jk__Ipmstor__feedbackisp_name, ::Ice::Normal, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::IPMS::jk::ISPinfoList
IceProxy::IPMS::jk::Ipmstor::end_feedbackisp(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __IPMS__jk__Ipmstor__feedbackisp_name);
    ::IPMS::jk::ISPinfoList __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::IPMS::jk::SSIspList
IceProxy::IPMS::jk::Ipmstor::feedbackssisp(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __IPMS__jk__Ipmstor__feedbackssisp_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__IPMS__jk__Ipmstor__feedbackssisp_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::IPMS::jk::Ipmstor* __del = dynamic_cast< ::IceDelegate::IPMS::jk::Ipmstor*>(__delBase.get());
            return __del->feedbackssisp(__ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::IPMS::jk::Ipmstor::begin_feedbackssisp(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__IPMS__jk__Ipmstor__feedbackssisp_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __IPMS__jk__Ipmstor__feedbackssisp_name, __del, __cookie);
    try
    {
        __result->__prepare(__IPMS__jk__Ipmstor__feedbackssisp_name, ::Ice::Normal, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::IPMS::jk::SSIspList
IceProxy::IPMS::jk::Ipmstor::end_feedbackssisp(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __IPMS__jk__Ipmstor__feedbackssisp_name);
    ::IPMS::jk::SSIspList __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::IPMS::jk::SSinfoList
IceProxy::IPMS::jk::Ipmstor::feedbackpushengpy(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __IPMS__jk__Ipmstor__feedbackpushengpy_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__IPMS__jk__Ipmstor__feedbackpushengpy_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::IPMS::jk::Ipmstor* __del = dynamic_cast< ::IceDelegate::IPMS::jk::Ipmstor*>(__delBase.get());
            return __del->feedbackpushengpy(__ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::IPMS::jk::Ipmstor::begin_feedbackpushengpy(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__IPMS__jk__Ipmstor__feedbackpushengpy_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __IPMS__jk__Ipmstor__feedbackpushengpy_name, __del, __cookie);
    try
    {
        __result->__prepare(__IPMS__jk__Ipmstor__feedbackpushengpy_name, ::Ice::Normal, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::IPMS::jk::SSinfoList
IceProxy::IPMS::jk::Ipmstor::end_feedbackpushengpy(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __IPMS__jk__Ipmstor__feedbackpushengpy_name);
    ::IPMS::jk::SSinfoList __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

bool
IceProxy::IPMS::jk::Ipmstor::updateprovpy(const ::std::string& provname, const ::std::string& provpy, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __IPMS__jk__Ipmstor__updateprovpy_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__IPMS__jk__Ipmstor__updateprovpy_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::IPMS::jk::Ipmstor* __del = dynamic_cast< ::IceDelegate::IPMS::jk::Ipmstor*>(__delBase.get());
            return __del->updateprovpy(provname, provpy, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::IPMS::jk::Ipmstor::begin_updateprovpy(const ::std::string& provname, const ::std::string& provpy, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__IPMS__jk__Ipmstor__updateprovpy_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __IPMS__jk__Ipmstor__updateprovpy_name, __del, __cookie);
    try
    {
        __result->__prepare(__IPMS__jk__Ipmstor__updateprovpy_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(provname);
        __os->write(provpy);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

bool
IceProxy::IPMS::jk::Ipmstor::end_updateprovpy(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __IPMS__jk__Ipmstor__updateprovpy_name);
    bool __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::IPMS::jk::AREAinfoList
IceProxy::IPMS::jk::Ipmstor::feedbackarea(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __IPMS__jk__Ipmstor__feedbackarea_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__IPMS__jk__Ipmstor__feedbackarea_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::IPMS::jk::Ipmstor* __del = dynamic_cast< ::IceDelegate::IPMS::jk::Ipmstor*>(__delBase.get());
            return __del->feedbackarea(__ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::IPMS::jk::Ipmstor::begin_feedbackarea(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__IPMS__jk__Ipmstor__feedbackarea_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __IPMS__jk__Ipmstor__feedbackarea_name, __del, __cookie);
    try
    {
        __result->__prepare(__IPMS__jk__Ipmstor__feedbackarea_name, ::Ice::Normal, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::IPMS::jk::AREAinfoList
IceProxy::IPMS::jk::Ipmstor::end_feedbackarea(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __IPMS__jk__Ipmstor__feedbackarea_name);
    ::IPMS::jk::AREAinfoList __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::std::string
IceProxy::IPMS::jk::Ipmstor::feedbackviewarea(const ::std::string& area, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __IPMS__jk__Ipmstor__feedbackviewarea_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__IPMS__jk__Ipmstor__feedbackviewarea_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::IPMS::jk::Ipmstor* __del = dynamic_cast< ::IceDelegate::IPMS::jk::Ipmstor*>(__delBase.get());
            return __del->feedbackviewarea(area, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::IPMS::jk::Ipmstor::begin_feedbackviewarea(const ::std::string& area, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__IPMS__jk__Ipmstor__feedbackviewarea_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __IPMS__jk__Ipmstor__feedbackviewarea_name, __del, __cookie);
    try
    {
        __result->__prepare(__IPMS__jk__Ipmstor__feedbackviewarea_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(area);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::std::string
IceProxy::IPMS::jk::Ipmstor::end_feedbackviewarea(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __IPMS__jk__Ipmstor__feedbackviewarea_name);
    ::std::string __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::std::string
IceProxy::IPMS::jk::Ipmstor::feedbackipinfo(const ::std::string& ip, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __IPMS__jk__Ipmstor__feedbackipinfo_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__IPMS__jk__Ipmstor__feedbackipinfo_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::IPMS::jk::Ipmstor* __del = dynamic_cast< ::IceDelegate::IPMS::jk::Ipmstor*>(__delBase.get());
            return __del->feedbackipinfo(ip, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::IPMS::jk::Ipmstor::begin_feedbackipinfo(const ::std::string& ip, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__IPMS__jk__Ipmstor__feedbackipinfo_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __IPMS__jk__Ipmstor__feedbackipinfo_name, __del, __cookie);
    try
    {
        __result->__prepare(__IPMS__jk__Ipmstor__feedbackipinfo_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(ip);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::std::string
IceProxy::IPMS::jk::Ipmstor::end_feedbackipinfo(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __IPMS__jk__Ipmstor__feedbackipinfo_name);
    ::std::string __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::std::string
IceProxy::IPMS::jk::Ipmstor::feedbackviewsheng(const ::std::string& sheng, const ::std::string& isppy, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __IPMS__jk__Ipmstor__feedbackviewsheng_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__IPMS__jk__Ipmstor__feedbackviewsheng_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::IPMS::jk::Ipmstor* __del = dynamic_cast< ::IceDelegate::IPMS::jk::Ipmstor*>(__delBase.get());
            return __del->feedbackviewsheng(sheng, isppy, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::IPMS::jk::Ipmstor::begin_feedbackviewsheng(const ::std::string& sheng, const ::std::string& isppy, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__IPMS__jk__Ipmstor__feedbackviewsheng_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __IPMS__jk__Ipmstor__feedbackviewsheng_name, __del, __cookie);
    try
    {
        __result->__prepare(__IPMS__jk__Ipmstor__feedbackviewsheng_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(sheng);
        __os->write(isppy);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::std::string
IceProxy::IPMS::jk::Ipmstor::end_feedbackviewsheng(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __IPMS__jk__Ipmstor__feedbackviewsheng_name);
    ::std::string __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::std::string
IceProxy::IPMS::jk::Ipmstor::feedbackviewlargearea(const ::std::string& largearea, const ::std::string& isppy, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __IPMS__jk__Ipmstor__feedbackviewlargearea_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__IPMS__jk__Ipmstor__feedbackviewlargearea_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::IPMS::jk::Ipmstor* __del = dynamic_cast< ::IceDelegate::IPMS::jk::Ipmstor*>(__delBase.get());
            return __del->feedbackviewlargearea(largearea, isppy, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::IPMS::jk::Ipmstor::begin_feedbackviewlargearea(const ::std::string& largearea, const ::std::string& isppy, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__IPMS__jk__Ipmstor__feedbackviewlargearea_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __IPMS__jk__Ipmstor__feedbackviewlargearea_name, __del, __cookie);
    try
    {
        __result->__prepare(__IPMS__jk__Ipmstor__feedbackviewlargearea_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(largearea);
        __os->write(isppy);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::std::string
IceProxy::IPMS::jk::Ipmstor::end_feedbackviewlargearea(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __IPMS__jk__Ipmstor__feedbackviewlargearea_name);
    ::std::string __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

bool
IceProxy::IPMS::jk::Ipmstor::updatecitypy(const ::std::string& provname, const ::std::string& provpy, const ::std::string& cityname, const ::std::string& citypy, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __IPMS__jk__Ipmstor__updatecitypy_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__IPMS__jk__Ipmstor__updatecitypy_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::IPMS::jk::Ipmstor* __del = dynamic_cast< ::IceDelegate::IPMS::jk::Ipmstor*>(__delBase.get());
            return __del->updatecitypy(provname, provpy, cityname, citypy, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::IPMS::jk::Ipmstor::begin_updatecitypy(const ::std::string& provname, const ::std::string& provpy, const ::std::string& cityname, const ::std::string& citypy, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__IPMS__jk__Ipmstor__updatecitypy_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __IPMS__jk__Ipmstor__updatecitypy_name, __del, __cookie);
    try
    {
        __result->__prepare(__IPMS__jk__Ipmstor__updatecitypy_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(provname);
        __os->write(provpy);
        __os->write(cityname);
        __os->write(citypy);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

bool
IceProxy::IPMS::jk::Ipmstor::end_updatecitypy(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __IPMS__jk__Ipmstor__updatecitypy_name);
    bool __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

bool
IceProxy::IPMS::jk::Ipmstor::updatehaiwaipy(const ::std::string& provname, const ::std::string& provpy, const ::std::string& cityname, const ::std::string& citypy, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __IPMS__jk__Ipmstor__updatehaiwaipy_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__IPMS__jk__Ipmstor__updatehaiwaipy_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::IPMS::jk::Ipmstor* __del = dynamic_cast< ::IceDelegate::IPMS::jk::Ipmstor*>(__delBase.get());
            return __del->updatehaiwaipy(provname, provpy, cityname, citypy, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::IPMS::jk::Ipmstor::begin_updatehaiwaipy(const ::std::string& provname, const ::std::string& provpy, const ::std::string& cityname, const ::std::string& citypy, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__IPMS__jk__Ipmstor__updatehaiwaipy_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __IPMS__jk__Ipmstor__updatehaiwaipy_name, __del, __cookie);
    try
    {
        __result->__prepare(__IPMS__jk__Ipmstor__updatehaiwaipy_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(provname);
        __os->write(provpy);
        __os->write(cityname);
        __os->write(citypy);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

bool
IceProxy::IPMS::jk::Ipmstor::end_updatehaiwaipy(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __IPMS__jk__Ipmstor__updatehaiwaipy_name);
    bool __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

const ::std::string&
IceProxy::IPMS::jk::Ipmstor::ice_staticId()
{
    return ::IPMS::jk::Ipmstor::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::IPMS::jk::Ipmstor::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::IPMS::jk::Ipmstor);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::IPMS::jk::Ipmstor::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::IPMS::jk::Ipmstor);
}

::IceProxy::Ice::Object*
IceProxy::IPMS::jk::Ipmstor::__newInstance() const
{
    return new Ipmstor;
}

::std::string
IceDelegateM::IPMS::jk::Ipmstor::ipmssea(const ::std::string& start, const ::std::string& end, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __IPMS__jk__Ipmstor__ipmssea_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(start);
        __os->write(end);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::std::string __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

bool
IceDelegateM::IPMS::jk::Ipmstor::updatednipdata(const ::IPMS::dx::IPinfo& ipinfo, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __IPMS__jk__Ipmstor__updatednipdata_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(ipinfo);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    bool __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::std::string
IceDelegateM::IPMS::jk::Ipmstor::updatewhois(const ::std::string& ip, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __IPMS__jk__Ipmstor__updatewhois_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(ip);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::std::string __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::std::string
IceDelegateM::IPMS::jk::Ipmstor::feedbackview(const ::std::string& prov, const ::std::string& city, const ::std::string& isp, const ::std::string& opflag, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __IPMS__jk__Ipmstor__feedbackview_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(prov);
        __os->write(city);
        __os->write(isp);
        __os->write(opflag);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::std::string __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::std::string
IceDelegateM::IPMS::jk::Ipmstor::feedbackqitalianxu(const ::std::string& prov, const ::std::string& city, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __IPMS__jk__Ipmstor__feedbackqitalianxu_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(prov);
        __os->write(city);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::std::string __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::std::string
IceDelegateM::IPMS::jk::Ipmstor::feedbackareaview(const ::std::string& areapy, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __IPMS__jk__Ipmstor__feedbackareaview_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(areapy);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::std::string __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::IPMS::jk::PRinfoList
IceDelegateM::IPMS::jk::Ipmstor::feedbacksp(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __IPMS__jk__Ipmstor__feedbacksp_name, ::Ice::Normal, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    ::IPMS::jk::PRinfoList __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::IPMS::jk::SSinfoList
IceDelegateM::IPMS::jk::Ipmstor::feedbacks(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __IPMS__jk__Ipmstor__feedbacks_name, ::Ice::Normal, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    ::IPMS::jk::SSinfoList __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::IPMS::jk::SSinfoList
IceDelegateM::IPMS::jk::Ipmstor::feedbackss(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __IPMS__jk__Ipmstor__feedbackss_name, ::Ice::Normal, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    ::IPMS::jk::SSinfoList __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::IPMS::jk::SSIspList
IceDelegateM::IPMS::jk::Ipmstor::feedbackoldss(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __IPMS__jk__Ipmstor__feedbackoldss_name, ::Ice::Normal, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    ::IPMS::jk::SSIspList __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::IPMS::jk::SSinfoList
IceDelegateM::IPMS::jk::Ipmstor::feedbackhaiwai(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __IPMS__jk__Ipmstor__feedbackhaiwai_name, ::Ice::Normal, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    ::IPMS::jk::SSinfoList __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::IPMS::jk::ISPinfoList
IceDelegateM::IPMS::jk::Ipmstor::feedbackisp(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __IPMS__jk__Ipmstor__feedbackisp_name, ::Ice::Normal, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    ::IPMS::jk::ISPinfoList __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::IPMS::jk::SSIspList
IceDelegateM::IPMS::jk::Ipmstor::feedbackssisp(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __IPMS__jk__Ipmstor__feedbackssisp_name, ::Ice::Normal, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    ::IPMS::jk::SSIspList __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::IPMS::jk::SSinfoList
IceDelegateM::IPMS::jk::Ipmstor::feedbackpushengpy(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __IPMS__jk__Ipmstor__feedbackpushengpy_name, ::Ice::Normal, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    ::IPMS::jk::SSinfoList __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

bool
IceDelegateM::IPMS::jk::Ipmstor::updateprovpy(const ::std::string& provname, const ::std::string& provpy, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __IPMS__jk__Ipmstor__updateprovpy_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(provname);
        __os->write(provpy);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    bool __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::IPMS::jk::AREAinfoList
IceDelegateM::IPMS::jk::Ipmstor::feedbackarea(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __IPMS__jk__Ipmstor__feedbackarea_name, ::Ice::Normal, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    ::IPMS::jk::AREAinfoList __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::std::string
IceDelegateM::IPMS::jk::Ipmstor::feedbackviewarea(const ::std::string& area, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __IPMS__jk__Ipmstor__feedbackviewarea_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(area);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::std::string __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::std::string
IceDelegateM::IPMS::jk::Ipmstor::feedbackipinfo(const ::std::string& ip, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __IPMS__jk__Ipmstor__feedbackipinfo_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(ip);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::std::string __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::std::string
IceDelegateM::IPMS::jk::Ipmstor::feedbackviewsheng(const ::std::string& sheng, const ::std::string& isppy, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __IPMS__jk__Ipmstor__feedbackviewsheng_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(sheng);
        __os->write(isppy);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::std::string __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::std::string
IceDelegateM::IPMS::jk::Ipmstor::feedbackviewlargearea(const ::std::string& largearea, const ::std::string& isppy, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __IPMS__jk__Ipmstor__feedbackviewlargearea_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(largearea);
        __os->write(isppy);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::std::string __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

bool
IceDelegateM::IPMS::jk::Ipmstor::updatecitypy(const ::std::string& provname, const ::std::string& provpy, const ::std::string& cityname, const ::std::string& citypy, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __IPMS__jk__Ipmstor__updatecitypy_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(provname);
        __os->write(provpy);
        __os->write(cityname);
        __os->write(citypy);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    bool __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

bool
IceDelegateM::IPMS::jk::Ipmstor::updatehaiwaipy(const ::std::string& provname, const ::std::string& provpy, const ::std::string& cityname, const ::std::string& citypy, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __IPMS__jk__Ipmstor__updatehaiwaipy_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(provname);
        __os->write(provpy);
        __os->write(cityname);
        __os->write(citypy);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    bool __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::std::string
IceDelegateD::IPMS::jk::Ipmstor::ipmssea(const ::std::string& start, const ::std::string& end, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::std::string& __result, const ::std::string& __p_start, const ::std::string& __p_end, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_start(__p_start),
            _m_end(__p_end)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::IPMS::jk::Ipmstor* servant = dynamic_cast< ::IPMS::jk::Ipmstor*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->ipmssea(_m_start, _m_end, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::std::string& _result;
        const ::std::string& _m_start;
        const ::std::string& _m_end;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __IPMS__jk__Ipmstor__ipmssea_name, ::Ice::Normal, __context);
    ::std::string __result;
    try
    {
        _DirectI __direct(__result, start, end, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

bool
IceDelegateD::IPMS::jk::Ipmstor::updatednipdata(const ::IPMS::dx::IPinfo& ipinfo, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(bool& __result, const ::IPMS::dx::IPinfo& __p_ipinfo, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_ipinfo(__p_ipinfo)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::IPMS::jk::Ipmstor* servant = dynamic_cast< ::IPMS::jk::Ipmstor*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->updatednipdata(_m_ipinfo, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        bool& _result;
        const ::IPMS::dx::IPinfo& _m_ipinfo;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __IPMS__jk__Ipmstor__updatednipdata_name, ::Ice::Normal, __context);
    bool __result;
    try
    {
        _DirectI __direct(__result, ipinfo, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::std::string
IceDelegateD::IPMS::jk::Ipmstor::updatewhois(const ::std::string& ip, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::std::string& __result, const ::std::string& __p_ip, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_ip(__p_ip)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::IPMS::jk::Ipmstor* servant = dynamic_cast< ::IPMS::jk::Ipmstor*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->updatewhois(_m_ip, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::std::string& _result;
        const ::std::string& _m_ip;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __IPMS__jk__Ipmstor__updatewhois_name, ::Ice::Normal, __context);
    ::std::string __result;
    try
    {
        _DirectI __direct(__result, ip, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::std::string
IceDelegateD::IPMS::jk::Ipmstor::feedbackview(const ::std::string& prov, const ::std::string& city, const ::std::string& isp, const ::std::string& opflag, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::std::string& __result, const ::std::string& __p_prov, const ::std::string& __p_city, const ::std::string& __p_isp, const ::std::string& __p_opflag, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_prov(__p_prov),
            _m_city(__p_city),
            _m_isp(__p_isp),
            _m_opflag(__p_opflag)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::IPMS::jk::Ipmstor* servant = dynamic_cast< ::IPMS::jk::Ipmstor*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->feedbackview(_m_prov, _m_city, _m_isp, _m_opflag, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::std::string& _result;
        const ::std::string& _m_prov;
        const ::std::string& _m_city;
        const ::std::string& _m_isp;
        const ::std::string& _m_opflag;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __IPMS__jk__Ipmstor__feedbackview_name, ::Ice::Normal, __context);
    ::std::string __result;
    try
    {
        _DirectI __direct(__result, prov, city, isp, opflag, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::std::string
IceDelegateD::IPMS::jk::Ipmstor::feedbackqitalianxu(const ::std::string& prov, const ::std::string& city, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::std::string& __result, const ::std::string& __p_prov, const ::std::string& __p_city, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_prov(__p_prov),
            _m_city(__p_city)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::IPMS::jk::Ipmstor* servant = dynamic_cast< ::IPMS::jk::Ipmstor*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->feedbackqitalianxu(_m_prov, _m_city, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::std::string& _result;
        const ::std::string& _m_prov;
        const ::std::string& _m_city;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __IPMS__jk__Ipmstor__feedbackqitalianxu_name, ::Ice::Normal, __context);
    ::std::string __result;
    try
    {
        _DirectI __direct(__result, prov, city, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::std::string
IceDelegateD::IPMS::jk::Ipmstor::feedbackareaview(const ::std::string& areapy, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::std::string& __result, const ::std::string& __p_areapy, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_areapy(__p_areapy)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::IPMS::jk::Ipmstor* servant = dynamic_cast< ::IPMS::jk::Ipmstor*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->feedbackareaview(_m_areapy, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::std::string& _result;
        const ::std::string& _m_areapy;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __IPMS__jk__Ipmstor__feedbackareaview_name, ::Ice::Normal, __context);
    ::std::string __result;
    try
    {
        _DirectI __direct(__result, areapy, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::IPMS::jk::PRinfoList
IceDelegateD::IPMS::jk::Ipmstor::feedbacksp(const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::IPMS::jk::PRinfoList& __result, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::IPMS::jk::Ipmstor* servant = dynamic_cast< ::IPMS::jk::Ipmstor*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->feedbacksp(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::IPMS::jk::PRinfoList& _result;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __IPMS__jk__Ipmstor__feedbacksp_name, ::Ice::Normal, __context);
    ::IPMS::jk::PRinfoList __result;
    try
    {
        _DirectI __direct(__result, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::IPMS::jk::SSinfoList
IceDelegateD::IPMS::jk::Ipmstor::feedbacks(const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::IPMS::jk::SSinfoList& __result, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::IPMS::jk::Ipmstor* servant = dynamic_cast< ::IPMS::jk::Ipmstor*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->feedbacks(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::IPMS::jk::SSinfoList& _result;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __IPMS__jk__Ipmstor__feedbacks_name, ::Ice::Normal, __context);
    ::IPMS::jk::SSinfoList __result;
    try
    {
        _DirectI __direct(__result, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::IPMS::jk::SSinfoList
IceDelegateD::IPMS::jk::Ipmstor::feedbackss(const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::IPMS::jk::SSinfoList& __result, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::IPMS::jk::Ipmstor* servant = dynamic_cast< ::IPMS::jk::Ipmstor*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->feedbackss(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::IPMS::jk::SSinfoList& _result;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __IPMS__jk__Ipmstor__feedbackss_name, ::Ice::Normal, __context);
    ::IPMS::jk::SSinfoList __result;
    try
    {
        _DirectI __direct(__result, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::IPMS::jk::SSIspList
IceDelegateD::IPMS::jk::Ipmstor::feedbackoldss(const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::IPMS::jk::SSIspList& __result, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::IPMS::jk::Ipmstor* servant = dynamic_cast< ::IPMS::jk::Ipmstor*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->feedbackoldss(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::IPMS::jk::SSIspList& _result;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __IPMS__jk__Ipmstor__feedbackoldss_name, ::Ice::Normal, __context);
    ::IPMS::jk::SSIspList __result;
    try
    {
        _DirectI __direct(__result, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::IPMS::jk::SSinfoList
IceDelegateD::IPMS::jk::Ipmstor::feedbackhaiwai(const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::IPMS::jk::SSinfoList& __result, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::IPMS::jk::Ipmstor* servant = dynamic_cast< ::IPMS::jk::Ipmstor*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->feedbackhaiwai(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::IPMS::jk::SSinfoList& _result;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __IPMS__jk__Ipmstor__feedbackhaiwai_name, ::Ice::Normal, __context);
    ::IPMS::jk::SSinfoList __result;
    try
    {
        _DirectI __direct(__result, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::IPMS::jk::ISPinfoList
IceDelegateD::IPMS::jk::Ipmstor::feedbackisp(const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::IPMS::jk::ISPinfoList& __result, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::IPMS::jk::Ipmstor* servant = dynamic_cast< ::IPMS::jk::Ipmstor*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->feedbackisp(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::IPMS::jk::ISPinfoList& _result;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __IPMS__jk__Ipmstor__feedbackisp_name, ::Ice::Normal, __context);
    ::IPMS::jk::ISPinfoList __result;
    try
    {
        _DirectI __direct(__result, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::IPMS::jk::SSIspList
IceDelegateD::IPMS::jk::Ipmstor::feedbackssisp(const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::IPMS::jk::SSIspList& __result, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::IPMS::jk::Ipmstor* servant = dynamic_cast< ::IPMS::jk::Ipmstor*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->feedbackssisp(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::IPMS::jk::SSIspList& _result;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __IPMS__jk__Ipmstor__feedbackssisp_name, ::Ice::Normal, __context);
    ::IPMS::jk::SSIspList __result;
    try
    {
        _DirectI __direct(__result, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::IPMS::jk::SSinfoList
IceDelegateD::IPMS::jk::Ipmstor::feedbackpushengpy(const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::IPMS::jk::SSinfoList& __result, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::IPMS::jk::Ipmstor* servant = dynamic_cast< ::IPMS::jk::Ipmstor*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->feedbackpushengpy(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::IPMS::jk::SSinfoList& _result;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __IPMS__jk__Ipmstor__feedbackpushengpy_name, ::Ice::Normal, __context);
    ::IPMS::jk::SSinfoList __result;
    try
    {
        _DirectI __direct(__result, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

bool
IceDelegateD::IPMS::jk::Ipmstor::updateprovpy(const ::std::string& provname, const ::std::string& provpy, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(bool& __result, const ::std::string& __p_provname, const ::std::string& __p_provpy, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_provname(__p_provname),
            _m_provpy(__p_provpy)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::IPMS::jk::Ipmstor* servant = dynamic_cast< ::IPMS::jk::Ipmstor*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->updateprovpy(_m_provname, _m_provpy, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        bool& _result;
        const ::std::string& _m_provname;
        const ::std::string& _m_provpy;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __IPMS__jk__Ipmstor__updateprovpy_name, ::Ice::Normal, __context);
    bool __result;
    try
    {
        _DirectI __direct(__result, provname, provpy, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::IPMS::jk::AREAinfoList
IceDelegateD::IPMS::jk::Ipmstor::feedbackarea(const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::IPMS::jk::AREAinfoList& __result, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::IPMS::jk::Ipmstor* servant = dynamic_cast< ::IPMS::jk::Ipmstor*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->feedbackarea(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::IPMS::jk::AREAinfoList& _result;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __IPMS__jk__Ipmstor__feedbackarea_name, ::Ice::Normal, __context);
    ::IPMS::jk::AREAinfoList __result;
    try
    {
        _DirectI __direct(__result, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::std::string
IceDelegateD::IPMS::jk::Ipmstor::feedbackviewarea(const ::std::string& area, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::std::string& __result, const ::std::string& __p_area, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_area(__p_area)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::IPMS::jk::Ipmstor* servant = dynamic_cast< ::IPMS::jk::Ipmstor*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->feedbackviewarea(_m_area, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::std::string& _result;
        const ::std::string& _m_area;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __IPMS__jk__Ipmstor__feedbackviewarea_name, ::Ice::Normal, __context);
    ::std::string __result;
    try
    {
        _DirectI __direct(__result, area, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::std::string
IceDelegateD::IPMS::jk::Ipmstor::feedbackipinfo(const ::std::string& ip, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::std::string& __result, const ::std::string& __p_ip, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_ip(__p_ip)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::IPMS::jk::Ipmstor* servant = dynamic_cast< ::IPMS::jk::Ipmstor*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->feedbackipinfo(_m_ip, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::std::string& _result;
        const ::std::string& _m_ip;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __IPMS__jk__Ipmstor__feedbackipinfo_name, ::Ice::Normal, __context);
    ::std::string __result;
    try
    {
        _DirectI __direct(__result, ip, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::std::string
IceDelegateD::IPMS::jk::Ipmstor::feedbackviewsheng(const ::std::string& sheng, const ::std::string& isppy, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::std::string& __result, const ::std::string& __p_sheng, const ::std::string& __p_isppy, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_sheng(__p_sheng),
            _m_isppy(__p_isppy)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::IPMS::jk::Ipmstor* servant = dynamic_cast< ::IPMS::jk::Ipmstor*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->feedbackviewsheng(_m_sheng, _m_isppy, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::std::string& _result;
        const ::std::string& _m_sheng;
        const ::std::string& _m_isppy;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __IPMS__jk__Ipmstor__feedbackviewsheng_name, ::Ice::Normal, __context);
    ::std::string __result;
    try
    {
        _DirectI __direct(__result, sheng, isppy, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::std::string
IceDelegateD::IPMS::jk::Ipmstor::feedbackviewlargearea(const ::std::string& largearea, const ::std::string& isppy, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::std::string& __result, const ::std::string& __p_largearea, const ::std::string& __p_isppy, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_largearea(__p_largearea),
            _m_isppy(__p_isppy)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::IPMS::jk::Ipmstor* servant = dynamic_cast< ::IPMS::jk::Ipmstor*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->feedbackviewlargearea(_m_largearea, _m_isppy, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::std::string& _result;
        const ::std::string& _m_largearea;
        const ::std::string& _m_isppy;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __IPMS__jk__Ipmstor__feedbackviewlargearea_name, ::Ice::Normal, __context);
    ::std::string __result;
    try
    {
        _DirectI __direct(__result, largearea, isppy, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

bool
IceDelegateD::IPMS::jk::Ipmstor::updatecitypy(const ::std::string& provname, const ::std::string& provpy, const ::std::string& cityname, const ::std::string& citypy, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(bool& __result, const ::std::string& __p_provname, const ::std::string& __p_provpy, const ::std::string& __p_cityname, const ::std::string& __p_citypy, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_provname(__p_provname),
            _m_provpy(__p_provpy),
            _m_cityname(__p_cityname),
            _m_citypy(__p_citypy)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::IPMS::jk::Ipmstor* servant = dynamic_cast< ::IPMS::jk::Ipmstor*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->updatecitypy(_m_provname, _m_provpy, _m_cityname, _m_citypy, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        bool& _result;
        const ::std::string& _m_provname;
        const ::std::string& _m_provpy;
        const ::std::string& _m_cityname;
        const ::std::string& _m_citypy;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __IPMS__jk__Ipmstor__updatecitypy_name, ::Ice::Normal, __context);
    bool __result;
    try
    {
        _DirectI __direct(__result, provname, provpy, cityname, citypy, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

bool
IceDelegateD::IPMS::jk::Ipmstor::updatehaiwaipy(const ::std::string& provname, const ::std::string& provpy, const ::std::string& cityname, const ::std::string& citypy, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(bool& __result, const ::std::string& __p_provname, const ::std::string& __p_provpy, const ::std::string& __p_cityname, const ::std::string& __p_citypy, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_provname(__p_provname),
            _m_provpy(__p_provpy),
            _m_cityname(__p_cityname),
            _m_citypy(__p_citypy)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::IPMS::jk::Ipmstor* servant = dynamic_cast< ::IPMS::jk::Ipmstor*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->updatehaiwaipy(_m_provname, _m_provpy, _m_cityname, _m_citypy, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        bool& _result;
        const ::std::string& _m_provname;
        const ::std::string& _m_provpy;
        const ::std::string& _m_cityname;
        const ::std::string& _m_citypy;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __IPMS__jk__Ipmstor__updatehaiwaipy_name, ::Ice::Normal, __context);
    bool __result;
    try
    {
        _DirectI __direct(__result, provname, provpy, cityname, citypy, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Ice::Object* IPMS::jk::upCast(::IPMS::jk::Ipmstor* p) { return p; }

namespace
{
const ::std::string __IPMS__jk__Ipmstor_ids[2] =
{
    "::IPMS::jk::Ipmstor",
    "::Ice::Object"
};

}

bool
IPMS::jk::Ipmstor::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__IPMS__jk__Ipmstor_ids, __IPMS__jk__Ipmstor_ids + 2, _s);
}

::std::vector< ::std::string>
IPMS::jk::Ipmstor::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__IPMS__jk__Ipmstor_ids[0], &__IPMS__jk__Ipmstor_ids[2]);
}

const ::std::string&
IPMS::jk::Ipmstor::ice_id(const ::Ice::Current&) const
{
    return __IPMS__jk__Ipmstor_ids[0];
}

const ::std::string&
IPMS::jk::Ipmstor::ice_staticId()
{
    return __IPMS__jk__Ipmstor_ids[0];
}

::Ice::DispatchStatus
IPMS::jk::Ipmstor::___ipmssea(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string start;
    ::std::string end;
    __is->read(start);
    __is->read(end);
    __inS.endReadParams();
    ::std::string __ret = ipmssea(start, end, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
IPMS::jk::Ipmstor::___updatednipdata(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::IPMS::dx::IPinfo ipinfo;
    __is->read(ipinfo);
    __inS.endReadParams();
    bool __ret = updatednipdata(ipinfo, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
IPMS::jk::Ipmstor::___updatewhois(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string ip;
    __is->read(ip);
    __inS.endReadParams();
    ::std::string __ret = updatewhois(ip, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
IPMS::jk::Ipmstor::___feedbackview(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string prov;
    ::std::string city;
    ::std::string isp;
    ::std::string opflag;
    __is->read(prov);
    __is->read(city);
    __is->read(isp);
    __is->read(opflag);
    __inS.endReadParams();
    ::std::string __ret = feedbackview(prov, city, isp, opflag, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
IPMS::jk::Ipmstor::___feedbackqitalianxu(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string prov;
    ::std::string city;
    __is->read(prov);
    __is->read(city);
    __inS.endReadParams();
    ::std::string __ret = feedbackqitalianxu(prov, city, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
IPMS::jk::Ipmstor::___feedbackareaview(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string areapy;
    __is->read(areapy);
    __inS.endReadParams();
    ::std::string __ret = feedbackareaview(areapy, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
IPMS::jk::Ipmstor::___feedbacksp(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::IPMS::jk::PRinfoList __ret = feedbacksp(__current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
IPMS::jk::Ipmstor::___feedbacks(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::IPMS::jk::SSinfoList __ret = feedbacks(__current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
IPMS::jk::Ipmstor::___feedbackss(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::IPMS::jk::SSinfoList __ret = feedbackss(__current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
IPMS::jk::Ipmstor::___feedbackoldss(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::IPMS::jk::SSIspList __ret = feedbackoldss(__current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
IPMS::jk::Ipmstor::___feedbackhaiwai(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::IPMS::jk::SSinfoList __ret = feedbackhaiwai(__current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
IPMS::jk::Ipmstor::___feedbackisp(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::IPMS::jk::ISPinfoList __ret = feedbackisp(__current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
IPMS::jk::Ipmstor::___feedbackssisp(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::IPMS::jk::SSIspList __ret = feedbackssisp(__current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
IPMS::jk::Ipmstor::___feedbackpushengpy(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::IPMS::jk::SSinfoList __ret = feedbackpushengpy(__current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
IPMS::jk::Ipmstor::___updateprovpy(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string provname;
    ::std::string provpy;
    __is->read(provname);
    __is->read(provpy);
    __inS.endReadParams();
    bool __ret = updateprovpy(provname, provpy, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
IPMS::jk::Ipmstor::___feedbackarea(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::IPMS::jk::AREAinfoList __ret = feedbackarea(__current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
IPMS::jk::Ipmstor::___feedbackviewarea(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string area;
    __is->read(area);
    __inS.endReadParams();
    ::std::string __ret = feedbackviewarea(area, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
IPMS::jk::Ipmstor::___feedbackipinfo(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string ip;
    __is->read(ip);
    __inS.endReadParams();
    ::std::string __ret = feedbackipinfo(ip, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
IPMS::jk::Ipmstor::___feedbackviewsheng(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string sheng;
    ::std::string isppy;
    __is->read(sheng);
    __is->read(isppy);
    __inS.endReadParams();
    ::std::string __ret = feedbackviewsheng(sheng, isppy, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
IPMS::jk::Ipmstor::___feedbackviewlargearea(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string largearea;
    ::std::string isppy;
    __is->read(largearea);
    __is->read(isppy);
    __inS.endReadParams();
    ::std::string __ret = feedbackviewlargearea(largearea, isppy, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
IPMS::jk::Ipmstor::___updatecitypy(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string provname;
    ::std::string provpy;
    ::std::string cityname;
    ::std::string citypy;
    __is->read(provname);
    __is->read(provpy);
    __is->read(cityname);
    __is->read(citypy);
    __inS.endReadParams();
    bool __ret = updatecitypy(provname, provpy, cityname, citypy, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
IPMS::jk::Ipmstor::___updatehaiwaipy(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string provname;
    ::std::string provpy;
    ::std::string cityname;
    ::std::string citypy;
    __is->read(provname);
    __is->read(provpy);
    __is->read(cityname);
    __is->read(citypy);
    __inS.endReadParams();
    bool __ret = updatehaiwaipy(provname, provpy, cityname, citypy, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __IPMS__jk__Ipmstor_all[] =
{
    "feedbackarea",
    "feedbackareaview",
    "feedbackhaiwai",
    "feedbackipinfo",
    "feedbackisp",
    "feedbackoldss",
    "feedbackpushengpy",
    "feedbackqitalianxu",
    "feedbacks",
    "feedbacksp",
    "feedbackss",
    "feedbackssisp",
    "feedbackview",
    "feedbackviewarea",
    "feedbackviewlargearea",
    "feedbackviewsheng",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "ipmssea",
    "updatecitypy",
    "updatednipdata",
    "updatehaiwaipy",
    "updateprovpy",
    "updatewhois"
};

}

::Ice::DispatchStatus
IPMS::jk::Ipmstor::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__IPMS__jk__Ipmstor_all, __IPMS__jk__Ipmstor_all + 26, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __IPMS__jk__Ipmstor_all)
    {
        case 0:
        {
            return ___feedbackarea(in, current);
        }
        case 1:
        {
            return ___feedbackareaview(in, current);
        }
        case 2:
        {
            return ___feedbackhaiwai(in, current);
        }
        case 3:
        {
            return ___feedbackipinfo(in, current);
        }
        case 4:
        {
            return ___feedbackisp(in, current);
        }
        case 5:
        {
            return ___feedbackoldss(in, current);
        }
        case 6:
        {
            return ___feedbackpushengpy(in, current);
        }
        case 7:
        {
            return ___feedbackqitalianxu(in, current);
        }
        case 8:
        {
            return ___feedbacks(in, current);
        }
        case 9:
        {
            return ___feedbacksp(in, current);
        }
        case 10:
        {
            return ___feedbackss(in, current);
        }
        case 11:
        {
            return ___feedbackssisp(in, current);
        }
        case 12:
        {
            return ___feedbackview(in, current);
        }
        case 13:
        {
            return ___feedbackviewarea(in, current);
        }
        case 14:
        {
            return ___feedbackviewlargearea(in, current);
        }
        case 15:
        {
            return ___feedbackviewsheng(in, current);
        }
        case 16:
        {
            return ___ice_id(in, current);
        }
        case 17:
        {
            return ___ice_ids(in, current);
        }
        case 18:
        {
            return ___ice_isA(in, current);
        }
        case 19:
        {
            return ___ice_ping(in, current);
        }
        case 20:
        {
            return ___ipmssea(in, current);
        }
        case 21:
        {
            return ___updatecitypy(in, current);
        }
        case 22:
        {
            return ___updatednipdata(in, current);
        }
        case 23:
        {
            return ___updatehaiwaipy(in, current);
        }
        case 24:
        {
            return ___updateprovpy(in, current);
        }
        case 25:
        {
            return ___updatewhois(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
IPMS::jk::Ipmstor::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
IPMS::jk::Ipmstor::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
IPMS::jk::__patch(IpmstorPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::IPMS::jk::IpmstorPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::IPMS::jk::Ipmstor::ice_staticId(), v);
    }
}
